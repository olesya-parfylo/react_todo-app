{"version":3,"sources":["TodosContext.tsx","components/TodoApp/TodoApp.tsx","components/Footer/Footer.tsx","components/ToggleAll/ToggleAll.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoPage/TodoPage.tsx","App.tsx","index.tsx"],"names":["TodosContext","React","createContext","TodosProvider","children","useState","JSON","parse","localStorage","todos","setTodos","toggleAll","setToggleAll","useEffect","setItem","stringify","currentTodos","map","todo","completed","every","handlerToggleAll","useCallback","currentValue","state","addTodo","title","id","Date","deleteTodo","filter","checkedTodo","clearCompleted","onChangeTodo","validationTitle","replace","Provider","value","TodoApp","setTitle","useContext","type","className","placeholder","onChange","e","target","onKeyDown","key","preventDefault","Footer","length","item","to","style","isActive","borderColor","toUpperCase","substring","onClick","ToggleAll","disabled","checked","htmlFor","TodoItem","editing","setEditing","classNames","onDoubleClick","onBlur","TodoList","Fragment","TodoPage","path","element","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf5e3ac1.chunk.js","sourcesContent":["import React, {\n  useState, useCallback, useEffect,\n} from 'react';\nimport { ContextValue } from './types/ContextValue';\nimport { Todo } from './types/Todo';\n\nexport const TodosContext = React.createContext<ContextValue | null>(null);\n\nexport const TodosProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[] | null>(JSON.parse(localStorage.todos) || null);\n  const [toggleAll, setToggleAll] = useState<string>('');\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  useEffect(() => {\n    setTodos((currentTodos: Todo[] | null) => {\n      const result = currentTodos?.map((todo: Todo) => {\n        switch (toggleAll) {\n          case 'allCompleted':\n            return { ...todo, completed: true };\n          case 'allActive':\n            return { ...todo, completed: false };\n          default:\n            return { ...todo };\n        }\n      });\n\n      return result || null;\n    });\n  }, [toggleAll]);\n\n  useEffect(() => {\n    setToggleAll(() => {\n      switch (true) {\n        case todos?.every((todo) => !todo.completed):\n          return 'allActive';\n\n        case todos?.every((todo) => todo.completed):\n          return 'allCompleted';\n\n        default:\n          return '';\n      }\n    });\n  }, [todos]);\n\n  const handlerToggleAll = useCallback(() => {\n    setToggleAll((currentValue: string) => {\n      let state: string;\n\n      switch (currentValue) {\n        case 'allCompleted':\n          state = 'allActive';\n          break;\n        case 'allActive':\n          state = 'allCompleted';\n          break;\n        default:\n          state = 'allCompleted';\n      }\n\n      return state;\n    });\n  }, []);\n\n  const addTodo = useCallback((title: string) => {\n    const todo = {\n      id: `${new Date()}`,\n      title,\n      completed: false,\n    };\n\n    setTodos((currentTodos: Todo[] | null) => {\n      return currentTodos !== null ? [...currentTodos, todo] : [todo];\n    });\n  }, []);\n\n  const deleteTodo = useCallback((id: string) => {\n    setTodos((currentTodos: Todo[] | null) => {\n      const result = currentTodos?.filter((todo: Todo) => todo.id !== id);\n\n      return result || null;\n    });\n  }, []);\n\n  const checkedTodo = useCallback((id: string) => {\n    setTodos((currentTodos: Todo[] | null) => {\n      const result = currentTodos?.map((todo: Todo) => {\n        return todo.id === id ? { ...todo, completed: !todo.completed } : todo;\n      });\n\n      return result || null;\n    });\n  }, []);\n\n  const clearCompleted = useCallback(() => {\n    setTodos((currentTodos: Todo[] | null) => {\n      const result = currentTodos?.filter((todo: Todo) => !todo.completed);\n\n      return result || null;\n    });\n  }, []);\n\n  const onChangeTodo = useCallback((id: string, title: string) => {\n    setTodos((currentTodos: Todo[] | null) => {\n      const result = currentTodos?.map((todo: Todo) => {\n        return todo.id === id ? { ...todo, title } : todo;\n      });\n\n      return result || null;\n    });\n  }, []);\n\n  const validationTitle = useCallback((title: string) => {\n    const correctedTitle = title.replace(/[^a-zа-яё0-9\\s]/gi, ' ').replace(/\\s+/g, ' ');\n\n    return correctedTitle;\n  }, []);\n\n  return (\n    <TodosContext.Provider\n      value={{\n        todos,\n        toggleAll,\n        setTodos,\n        handlerToggleAll,\n        onChangeTodo,\n        validationTitle,\n        addTodo,\n        deleteTodo,\n        checkedTodo,\n        clearCompleted,\n      }}\n    >\n      {children}\n    </TodosContext.Provider>\n\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { TodosContext } from '../../TodosContext';\n\nexport const TodoApp: React.FC = () => {\n  const [title, setTitle] = useState<string>('');\n  const addTodo = useContext(TodosContext)?.addTodo;\n  const validationTitle = useContext(TodosContext)?.validationTitle;\n\n  return (\n    <>\n      {addTodo && validationTitle && (\n        <form>\n          <input\n            type=\"text\"\n            value={title}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={(e) => {\n              setTitle(validationTitle(e.target.value));\n            }}\n            onKeyDown={(e) => {\n              const { key } = e;\n\n              switch (key) {\n                case 'Escape':\n                  setTitle('');\n                  break;\n                case 'Enter':\n                  e.preventDefault();\n                  if (validationTitle(title) !== '') {\n                    addTodo(title);\n                    setTitle('');\n                  }\n\n                  break;\n                default:\n                  break;\n              }\n            }}\n          />\n        </form>\n      )}\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { TodosContext } from '../../TodosContext';\n\nconst state = ['all', 'active', 'completed'];\n\nexport const Footer: React.FC = () => {\n  const clearCompleted = useContext(TodosContext)?.clearCompleted;\n  const todos = useContext(TodosContext)?.todos;\n\n  return (\n    <>\n      {clearCompleted && todos && todos?.length !== 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} items left`}\n          </span>\n\n          <div className=\"filters\">\n            {state.map(item => (\n              <li key={item} className=\"selected\">\n                <NavLink\n                  to={`/${item === 'all' ? '' : item}`}\n                  style={({ isActive }) => (isActive ? { borderColor: 'rgba(175, 47, 47, 0.2)' } : {})}\n                >\n                  {item[0].toUpperCase() + item.substring(1)}\n                </NavLink>\n              </li>\n            ))}\n          </div>\n\n          <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n            Clear completed\n          </button>\n        </footer>\n      )}\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodosContext } from '../../TodosContext';\n\nexport const ToggleAll: React.FC = () => {\n  const todos = useContext(TodosContext)?.todos;\n  const toggleAll = useContext(TodosContext)?.toggleAll;\n  const handlerToggleAll = useContext(TodosContext)?.handlerToggleAll;\n\n  return (\n    <>\n      {handlerToggleAll && (\n        <>\n          <input\n            disabled={todos === null}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={toggleAll === 'allCompleted'}\n            onChange={() => {\n              handlerToggleAll();\n            }}\n          />\n          <label htmlFor=\"toggle-all\">\n            {}\n          </label>\n        </>\n      )}\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodosContext } from '../../TodosContext';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const [editing, setEditing] = useState(false);\n  const [title, setTitle] = useState(todo.title);\n  const checkedTodo = useContext(TodosContext)?.checkedTodo;\n  const deleteTodo = useContext(TodosContext)?.deleteTodo;\n  const onChangeTodo = useContext(TodosContext)?.onChangeTodo;\n  const validationTitle = useContext(TodosContext)?.validationTitle;\n\n  useEffect(() => {\n    setTitle(editing ? todo.title : '');\n  }, [editing]);\n\n  return (\n    <>\n      {checkedTodo && deleteTodo && onChangeTodo && validationTitle && (\n        <li\n          className={classNames({ completed: todo.completed, editing })}\n        >\n          <div className=\"view\">\n            <input\n              id={todo.id}\n              type=\"checkbox\"\n              className=\"toggle\"\n              onChange={() => {\n                checkedTodo(todo.id);\n              }}\n              checked={todo.completed}\n            />\n            <label\n              htmlFor={todo.id}\n              onDoubleClick={() => {\n                setEditing(!editing);\n              }}\n            >\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => {\n                deleteTodo(todo.id);\n              }}\n            >\n              {}\n            </button>\n          </div>\n          <input\n            type=\"text\"\n            value={title}\n            className=\"edit\"\n            onChange={({ target }) => {\n              if (validationTitle(target.value) !== '') {\n                setTitle(validationTitle(target.value));\n              }\n            }}\n            onBlur={(e) => {\n              e.preventDefault();\n              if (validationTitle(title) !== '') {\n                onChangeTodo(todo.id, title);\n                setEditing(!editing);\n              }\n            }}\n            onKeyDown={(e) => {\n              const { key } = e;\n\n              switch (key) {\n                case 'Escape':\n                  setEditing(!editing);\n                  break;\n                case 'Enter':\n                  e.preventDefault();\n                  if (validationTitle(title) !== '') {\n                    onChangeTodo(todo.id, title);\n                    setEditing(!editing);\n                  }\n\n                  break;\n                default:\n                  break;\n              }\n            }}\n          />\n        </li>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map((todo: Todo) => (\n        <React.Fragment key={todo.id}>\n          <TodoItem todo={todo} />\n        </React.Fragment>\n      ))}\n    </ul>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { TodoList } from '../TodoList';\nimport { TodosContext } from '../../TodosContext';\n\nexport const TodoPage: React.FC = () => {\n  const todos = useContext(TodosContext)?.todos;\n\n  return (\n    <>\n      {todos && (\n        <Routes>\n          <Route path=\"*\" element={<TodoList todos={todos} />} />\n          <Route path=\"/active\" element={<TodoList todos={todos.filter(todo => !todo.completed)} />} />\n          <Route path=\"/completed\" element={<TodoList todos={todos.filter(todo => todo.completed)} />} />\n        </Routes>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { Footer } from './components/Footer';\nimport { TodosProvider } from './TodosContext';\nimport { ToggleAll } from './components/ToggleAll';\nimport { TodoPage } from './components/TodoPage';\n\nexport const App: React.FC = () => {\n  return (\n    <TodosProvider>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoApp />\n        </header>\n        <section className=\"main\">\n          <ToggleAll />\n          <TodoPage />\n        </section>\n        <Footer />\n      </section>\n    </TodosProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}